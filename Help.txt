import logging

class Logger:
    _instance = None  # Class attribute to store the singleton instance

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls, *args, **kwargs)
            cls._instance._initialize_logger()
        return cls._instance

    def _initialize_logger(self):
        """Private method to configure the logger."""
        self.logger = logging.getLogger("KafkaServiceLogger")
        self.logger.setLevel(logging.INFO)

        # Create console handler
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        # Create formatter and add it to the handler
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        console_handler.setFormatter(formatter)

        # Add handler to the logger
        self.logger.addHandler(console_handler)

    def get_logger(self):
        """Public method to access the logger instance."""
        return self.logger

# Usage
logger1 = Logger().get_logger()
logger1.info("This is the first log message.")

logger2 = Logger().get_logger()
logger2.info("This is the second log message.")

# Verifying the Singleton
print(logger1 is logger2)  # Output: True

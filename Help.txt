import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Base64;

DAB.TlsCert tlsCert = new DAB.TlsCert();

// Decode the Base64-encoded certificate and write it to a temporary file
byte[] decodedCert = Base64.getDecoder().decode(TestDataFileHandler.FilePaths.TLS_CERT_BASE64);
Path certPath = Files.write(Files.createTempFile("tls_cert", ".p12"), decodedCert, StandardOpenOption.WRITE);

tlsCert.setPath(certPath.toAbsolutePath().toString());
tlsCert.setPassword(TestDataFileHandler.FilePaths.TLS_CERT_PASSWORD);  // Password is already stored
dab.setTlsCert(tlsCert);



import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Base64;

public class TlsCertLoader {
    public static void main(String[] args) {
        try {
            DAB.TlsCert tlsCert = new DAB.TlsCert();

            // Decode Base64-encoded TLS certificate
            byte[] decodedCert = Base64.getDecoder().decode(TestDataFileHandler.FilePaths.TLS_CERT_BASE64);
            
            // Write to a temporary file
            Path certPath = Files.write(
                Files.createTempFile("tls_cert", ".p12"),
                decodedCert,
                StandardOpenOption.WRITE
            );

            // Set the certificate path and password
            tlsCert.setPath(certPath.toAbsolutePath().toString());
            tlsCert.setPassword(TestDataFileHandler.FilePaths.TLS_CERT_PASSWORD);

            // Set TLS certificate in DAB instance
            dab.setTlsCert(tlsCert);

            System.out.println("TLS Certificate loaded successfully from Base64.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



##################################################################

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Base64;

public class TlsCertLoader {
    public static void main(String[] args) {
        try {
            DAB.TlsCert tlsCert = new DAB.TlsCert();

            // Decode URL-safe Base64 encoded TLS certificate
            byte[] decodedCert = Base64.getUrlDecoder().decode(TestDataFileHandler.FilePaths.TLS_CERT_BASE64);

            // Write to a temporary file
            Path certPath = Files.write(
                Files.createTempFile("tls_cert", ".p12"),
                decodedCert,
                StandardOpenOption.WRITE
            );

            // Set the certificate path and password
            tlsCert.setPath(certPath.toAbsolutePath().toString());
            tlsCert.setPassword(TestDataFileHandler.FilePaths.TLS_CERT_PASSWORD);

            // Set TLS certificate in DAB instance
            dab.setTlsCert(tlsCert);

            System.out.println("TLS Certificate loaded successfully from Base64 (URL-Safe).");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


cat cert.p12 | base64 | tr '/+' '_-' | tr -d '='


#######################################

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <dependencies>
        <!-- Azure Identity Dependency -->
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
            <version>1.15.2</version>
            <scope>compile</scope>
        </dependency>

        <!-- Enforcing json-smart 2.5.2 -->
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>2.5.2</version>
        </dependency>

        <!-- Exclude json-smart:2.5.1 from msal4j -->
        <dependency>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>msal4j</artifactId>
            <version>1.19.0</version>
            <exclusions>
                <exclusion>
                    <groupId>net.minidev</groupId>
                    <artifactId>json-smart</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Exclude json-smart:2.5.1 from nimbusds-oauth2-oidc-sdk -->
        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>oauth2-oidc-sdk</artifactId>
            <version>11.18</version>
            <exclusions>
                <exclusion>
                    <groupId>net.minidev</groupId>
                    <artifactId>json-smart</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!-- Force json-smart 2.5.2 globally -->
            <dependency>
                <groupId>net.minidev</groupId>
                <artifactId>json-smart</artifactId>
                <version>2.5.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>



#######################################

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class DgPipelineConfigServiceImplTest {

    @Mock
    private DgPipelineConfigDAO dgPipelineConfigDAO;

    @InjectMocks
    private DgPipelineConfigServiceImpl dgPipelineConfigService;

    private List<DgPipelineConfig> sampleConfigs;

    @BeforeEach
    void setUp() {
        sampleConfigs = Arrays.asList(new DgPipelineConfig(), new DgPipelineConfig());
    }

    @Test
    void testSaveAllDgPipelineConfigs() {
        // Given
        doNothing().when(dgPipelineConfigDAO).saveAll(sampleConfigs);

        // When
        dgPipelineConfigService.saveAllDgPipelineConfigs(sampleConfigs);

        // Then
        verify(dgPipelineConfigDAO, times(1)).saveAll(sampleConfigs);
    }

    @Test
    void testDeleteAllDgPipelineConfig() {
        // Given
        doNothing().when(dgPipelineConfigDAO).deleteAll();

        // When
        dgPipelineConfigService.deleteAllDgPipelineConfig();

        // Then
        verify(dgPipelineConfigDAO, times(1)).deleteAll();
    }

    @Test
    @Transactional
    void testRefreshPipelineConfig() {
        // Given
        doNothing().when(dgPipelineConfigDAO).deleteAll();
        doNothing().when(dgPipelineConfigDAO).saveAll(sampleConfigs);

        // When
        dgPipelineConfigService.refreshPipelineConfig(sampleConfigs);

        // Then
        verify(dgPipelineConfigDAO, times(1)).deleteAll();
        verify(dgPipelineConfigDAO, times(1)).saveAll(sampleConfigs);
    }
}

import logging
import threading

class SingletonMeta(type):
    _instances = {}
    _lock = threading.Lock()  # Lock for thread safety

    def __call__(cls, *args, **kwargs):
        with cls._lock:  # Ensure only one thread can access this block at a time
            if cls not in cls._instances:
                cls._instances[cls] = super().__call__(*args, **kwargs)
        return cls._instances[cls]

class Logger(metaclass=SingletonMeta):
    def __init__(self):
        self.logger = logging.getLogger("KafkaServiceLogger")
        self.logger.setLevel(logging.INFO)

        # Add handler only if not already added
        if not self.logger.hasHandlers():
            handler = logging.StreamHandler()
            handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
            self.logger.addHandler(handler)

    def get_logger(self):
        return self.logger

# Usage
logger1 = Logger().get_logger()
logger1.info("This is the first log message.")

logger2 = Logger().get_logger()
logger2.info("This is the second log message.")

# Verifying the Singleton
print(logger1 is logger2)  # Output: True
